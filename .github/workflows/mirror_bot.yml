name: Mirror bot

on:
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * 5'

permissions:
  contents: write
  pull-requests: write

env:
  pr_title: '[MDB IGNORE] [IDB IGNORE] Upstream mirror'
  pr_body: This is an automated pull request to merge the latest changes from the upstream repository.
  pr_branch: mirror
  pr_label: mirror
  upstream_repo: tgstation/tgstation
  upstream_branch: master
  commiter_name: psychonaut-ci[bot]
  commiter_email: 181007896+psychonaut-ci[bot]@users.noreply.github.com
  tracked_files: SQL/database_changelog.md,config/

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch upstream remote
        run: |
          git remote add upstream "https://github.com/$upstream_repo.git"
          git fetch upstream $upstream_branch
      - name: Check tracked files
        id: tracking
        run: |
          $files = [System.Collections.ArrayList]@()

          foreach ($_ in $Env:tracked_files -split ",") {
            if ($_.EndsWith("/")) {
              if ((git rev-list --count HEAD..FETCH_HEAD -- $_) -ne 0) {
                foreach ($_ in (git diff --name-only FETCH_HEAD -- $_)) {
                  $ahead = (git rev-list --count HEAD..FETCH_HEAD -- $_)
                  if ($ahead -ne 0) { $files.Add([Tuple]::Create($_, $ahead)) }
                }
              }
            } else {
              $ahead = (git rev-list --count HEAD..FETCH_HEAD -- $_)
              if ($ahead -ne 0) { $files.Add([Tuple]::Create($_, $ahead)) }
            }
          }

          if ($files.Count -ne 0) {
            $EOF = "TF$(-join (1..15 | ForEach { [char]((48..57) + (65..90) + (97..122) | Get-Random) }))"
            echo "tracked_files<<$EOF" >> $Env:GITHUB_OUTPUT

            echo "`n`nThe following tracked files have changed:" >> $Env:GITHUB_OUTPUT

            $upstream_hash = (git rev-parse FETCH_HEAD)

            foreach ($_ in $files) {
              $current = "https://github.com/$Env:GITHUB_REPOSITORY/commits/$Env:pr_branch\short-hash/$($_.item1)"
              $ours = "https://github.com/$Env:GITHUB_REPOSITORY/commits/$Env:GITHUB_REF_NAME/$($_.item1)"
              $theirs = "https://github.com/$Env:upstream_repo/commits/$upstream_hash/$($_.item1)"

              echo "- [ ] $($_.item1) - $($_.item2) commit(s) - [diff]($current) - [origin]($ours) - [upstream]($theirs)" >> $Env:GITHUB_OUTPUT
            }

            echo "$EOF" >> $Env:GITHUB_OUTPUT
          }
        shell: pwsh
      - name: Merge upstream branch
        run: |
          git config user.name "$commiter_name"
          git config user.email "$commiter_email"

          git merge FETCH_HEAD --no-commit --no-ff
        continue-on-error: true
      - name: Commit with conflicts
        id: commit
        run: |
          $files = (git diff --name-only --diff-filter=U)

          $EOF = "C$(-join (1..15 | ForEach { [char]((48..57) + (65..90) + (97..122) | Get-Random) }))"
          echo "conflicts<<$EOF" >> $Env:GITHUB_OUTPUT

          if ($files.Length -ne 0) {
            echo "`n`nThe following files have conflicts:" >> $Env:GITHUB_OUTPUT

            $deleted_by_us = [System.Collections.ArrayList]@()
            $deleted_by_them = [System.Collections.ArrayList]@()

            foreach ($_ in (git status --short --porcelain)) {
              $flag, $file = ($_.replace("  ", " ") -split " ")

              if ($flag -eq "DU") {
                $deleted_by_us += $file
              } elseif ($flag -eq "UD") {
                $deleted_by_them += $file
              }
            }

            git commit --all --no-edit

            $short_hash = (git rev-parse --short HEAD)
            $upstream_hash = (git rev-parse FETCH_HEAD)

            foreach ($file in $files) {
              $line = 1
              $conflicts = 0
              $head_marker = 0
              $branch_marker = 0

              $content = Get-Content $file

              foreach ($_ in $content) {
                if ($head_marker -eq 0 -and $_ -match "<<<<<<<") {
                  $head_marker = $line
                } elseif ($branch_marker -eq 0 -and $_ -match ">>>>>>>") {
                  $branch_marker = $line
                } elseif ($_ -match "=======") {
                  $conflicts += 1
                }

                $line += 1
              }

              if ($conflicts -eq 0) {
                if ($deleted_by_us.Contains($file)) {
                  $conflicts = "deleted by us"
                } elseif ($deleted_by_them.Contains($file)) {
                  $conflicts = "deleted by them"
                } elseif ($content -match '[^\u0000-\u007F]') {
                  $conflicts = "binary file"
                }
              }

              $current = "https://github.com/$Env:GITHUB_REPOSITORY/blob/$Env:pr_branch-$short_hash/$file#L$head_marker-L$branch_marker"
              $ours = "https://github.com/$Env:GITHUB_REPOSITORY/blob/$Env:GITHUB_REF_NAME/$file#L$head_marker"
              $theirs = "https://github.com/$Env:upstream_repo/blob/$upstream_hash/$file#L$head_marker"

              echo "- [ ] $file - $conflicts - [diff]($current) - [origin]($ours) - [upstream]($theirs)" >> $Env:GITHUB_OUTPUT
            }
          } else {
            echo "`n`nThere were no conflicts." >> $Env:GITHUB_OUTPUT

            git commit --all --no-edit

            $short_hash = (git rev-parse --short HEAD)
          }

          echo "$EOF" >> $Env:GITHUB_OUTPUT

          $tracked_files = "${{ steps.tracking.outputs.tracked_files }}"

          if ($tracked_files.Length -ne 0) {
            $EOF = "TF$(-join (1..15 | ForEach { [char]((48..57) + (65..90) + (97..122) | Get-Random) }))"
            echo "tracked_files<<$EOF" >> $Env:GITHUB_OUTPUT

            $tracked_files = $tracked_files.replace("\short-hash", $short_hash)

            foreach ($_ in $tracked_files -split "`r?`n|`r") {
              echo "$_" >> $Env:GITHUB_OUTPUT
            }

            echo "$EOF" >> $Env:GITHUB_OUTPUT
          }
        shell: pwsh
      - name: Generate App Token
        id: app-token-generation
        uses: actions/create-github-app-token@v1
        if: env.APP_PRIVATE_KEY != '' && env.APP_ID != ''
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        env:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          APP_ID: ${{ secrets.APP_ID }}
      - name: Create new pull request
        uses: peter-evans/create-pull-request@v3
        id: create-pull-request
        with:
          token: ${{ steps.app-token-generation.outputs.token || secrets.GITHUB_TOKEN }}
          author: ${{ env.commiter_name }} <${{ env.commiter_email }}>
          branch: ${{ env.pr_branch }}
          branch-suffix: short-commit-hash
          delete-branch: true
          title: ${{ env.pr_title }}
          body: ${{ env.pr_body }}${{ steps.commit.outputs.conflicts }}${{ steps.commit.outputs.tracked_files }}
          labels: ${{ env.pr_label }}
      - name: Close previous pull request(s)
        run: |
          $query = "repo:$Env:GITHUB_REPOSITORY is:pr is:open label:$Env:pr_label"
          $pr_number = ${{ steps.create-pull-request.outputs.pull-request-number }}
          foreach ($_ in $(gh api -X GET search/issues -F q="$query" --jq '.items[].number')) {
            if ($_ -ne $pr_number) {
              gh pr close $_ -R $Env:GITHUB_REPOSITORY -d -c "Superseded by #$pr_number."
            }
          }
        env:
          GH_TOKEN: ${{ steps.app-token-generation.outputs.token || secrets.GITHUB_TOKEN }}
        shell: pwsh
